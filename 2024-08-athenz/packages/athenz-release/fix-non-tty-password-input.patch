diff --git a/utils/zms-cli/zms-cli.go b/utils/zms-cli/zms-cli.go
index 552589db5..f46a5c5ee 100644
--- a/utils/zms-cli/zms-cli.go
+++ b/utils/zms-cli/zms-cli.go
@@ -9,6 +9,7 @@
 	"errors"
 	"flag"
 	"fmt"
+	"io"
 	"log"
 	"net"
 	"net/http"
@@ -94,6 +95,68 @@ func getCachedNToken() string {
 
 const identityPrefix = "user."
 
+// Copyright (c) 2009 The Go Authors. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//    * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//    * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//    * Neither the name of Google Inc. nor the names of its
+// contributors may be used to endorse or promote products derived from
+// this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// Workaround for https://github.com/golang/go/issues/19909
+func readPassword(prompt string) ([]byte, error) {
+	fmt.Fprintf(os.Stderr, prompt)
+
+	if terminal.IsTerminal(int(syscall.Stdin)) {
+		return terminal.ReadPassword(int(syscall.Stdin))
+	}
+
+	var buf [1]byte
+	var pass []byte
+
+	// https://github.com/golang/crypto/blob/a5d413f7728c81fb97d96a2b722368945f651e78/ssh/terminal/terminal.go#L942
+	for {
+		n, err := os.Stdin.Read(buf[:])
+		if n > 0 {
+			switch buf[0] {
+			case '\n':
+				return pass, nil
+			case '\r':
+				// remove \r from passwords on Windows
+			default:
+				pass = append(pass, buf[0])
+			}
+			continue
+		}
+		if err != nil {
+			if err == io.EOF && len(pass) > 0 {
+				return pass, nil
+			}
+			return pass, err
+		}
+	}
+}
+
 func getAuthNToken(identity, authorizedServices, zmsUrl string, tr *http.Transport) (string, error) {
 	// our identity must be user
 	if !strings.HasPrefix(identity, identityPrefix) {
@@ -105,8 +168,7 @@ func getAuthNToken(identity, authorizedServices, zmsUrl string, tr *http.Transpo
 		return ntoken, nil
 	}
 
-	fmt.Fprintf(os.Stderr, "Enter password for "+user+": ")
-	pass, err := terminal.ReadPassword(int(syscall.Stdin))
+	pass, err := readPassword("Enter password for "+user+": ")
 	if err != nil {
 		return "", err
 	}
